// Generated by CoffeeScript 1.4.0
(function() {
  var Body, Jungle, makeGrid;

  makeGrid = function(rows, columns, fill) {
    var c, grid, r, row, _i, _j;
    grid = [];
    for (r = _i = 1; 1 <= rows ? _i <= rows : _i >= rows; r = 1 <= rows ? ++_i : --_i) {
      row = [];
      for (c = _j = 1; 1 <= columns ? _j <= columns : _j >= columns; c = 1 <= columns ? ++_j : --_j) {
        row.push(fill);
      }
      grid.push(row);
    }
    return grid;
  };

  Body = (function() {

    function Body(sprite, x, y, misc) {
      var _ref, _ref1;
      this.sprite = sprite;
      this.x = x;
      this.y = y;
      if (misc == null) {
        misc = {};
      }
      this.width = (_ref = misc.width) != null ? _ref : 2;
      this.height = (_ref1 = misc.height) != null ? _ref1 : 2;
    }

    Body.prototype.occupying = function(jungle) {
      var bottom_row, bottom_y, c, left_column, left_x, r, right_column, right_x, squares, top_row, top_y, _i, _j;
      top_y = this.y;
      bottom_y = top_y + this.height * jungle.square_height;
      left_x = this.x;
      right_x = left_x + this.width * jungle.square_width;
      top_row = Math.floor(top_y / jungle.square_height);
      bottom_row = Math.ceil(bottom_y / jungle.square_height) - 1;
      left_column = Math.floor(left_x / jungle.square_width);
      right_column = Math.ceil(right_x / jungle.square_width) - 1;
      squares = [];
      for (r = _i = top_row; top_row <= bottom_row ? _i <= bottom_row : _i >= bottom_row; r = top_row <= bottom_row ? ++_i : --_i) {
        for (c = _j = left_column; left_column <= right_column ? _j <= right_column : _j >= right_column; c = left_column <= right_column ? ++_j : --_j) {
          squares.push([r, c]);
        }
      }
      return squares;
    };

    return Body;

  })();

  Jungle = (function() {

    function Jungle(canvas, misc) {
      var c, r, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      this.canvas = canvas;
      if (misc == null) {
        misc = {};
      }
      this.x_offset = (_ref = misc.x_offset) != null ? _ref : 0;
      this.y_offset = (_ref1 = misc.y_offset) != null ? _ref1 : 0;
      this.num_rows = r = (_ref2 = misc.num_rows) != null ? _ref2 : 24;
      this.num_columns = c = (_ref3 = misc.num_columns) != null ? _ref3 : 30;
      this.square_width = (_ref4 = misc.square_width) != null ? _ref4 : 16;
      this.square_height = (_ref5 = misc.square_height) != null ? _ref5 : 16;
      this.ctx = canvas.getContext('2d');
      this.frame = 0;
      this.anim_frame = 0;
      this.anim_subframe = 0;
      this.scenery = makeGrid(r, c, 'bare');
      this.pickups = makeGrid(r, c, []);
      this.bodies = makeGrid(r, c, []);
      this.pickup_list = [];
      this.body_list = [];
      null;
    }

    Jungle.prototype.advance = function() {
      this.frame++;
      this.anim_subframe++;
      if (this.anim_subframe === 5) {
        this.anim_subframe = 0;
        this.anim_frame = (this.anim_frame + 1) % 4;
      }
      return null;
    };

    Jungle.prototype.draw = function() {
      this.draw_scenery();
      this.draw_pickups();
      this.draw_bodies();
      return null;
    };

    Jungle.prototype.draw_scenery = function() {
      var c, r, _i, _j, _ref, _ref1;
      for (r = _i = 0, _ref = this.num_rows - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; r = 0 <= _ref ? ++_i : --_i) {
        for (c = _j = 0, _ref1 = this.num_columns - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; c = 0 <= _ref1 ? ++_j : --_j) {
          this.ctx.fillStyle = (function() {
            switch (this.scenery[r][c]) {
              case 'bare':
                return '#ffffcc';
              case 'grass':
                return '#00ff00';
              case 'water':
                return '#0033ff';
              case 'tree':
                return '#006600';
            }
          }).call(this);
          this.ctx.fillRect(c * this.square_width + this.x_offset, r * this.square_height + this.y_offset, this.square_width, this.square_height);
        }
      }
      return null;
    };

    Jungle.prototype.draw_pickups = function() {};

    Jungle.prototype.draw_bodies = function() {};

    Jungle.prototype.set_scenery = function(r, c, val) {
      this.scenery[r][c] = val;
      return null;
    };

    return Jungle;

  })();

  this.Jungle = Jungle;

}).call(this);
