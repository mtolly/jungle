// Generated by CoffeeScript 1.4.0
(function() {
  var Body, Gazelle, Jungle, Player, clockwise, clockwise_table, dirs, images, loadImages, makeGrid,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  makeGrid = function(rows, columns, fill) {
    var c, grid, r, row, _i, _j;
    grid = [];
    for (r = _i = 1; 1 <= rows ? _i <= rows : _i >= rows; r = 1 <= rows ? ++_i : --_i) {
      row = [];
      for (c = _j = 1; 1 <= columns ? _j <= columns : _j >= columns; c = 1 <= columns ? ++_j : --_j) {
        row.push(fill());
      }
      grid.push(row);
    }
    return grid;
  };

  dirs = ['up', 'down', 'left', 'right'];

  clockwise_table = {
    up: 'right',
    right: 'down',
    down: 'left',
    left: 'up'
  };

  clockwise = function(dir) {
    return clockwise_table[dir];
  };

  images = {};

  loadImages = function(urls) {
    var img, new_urls, todo, url, _i, _len;
    new_urls = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = urls.length; _i < _len; _i++) {
        url = urls[_i];
        if (!images[url]) {
          _results.push(url);
        }
      }
      return _results;
    })();
    todo = new_urls.length;
    for (_i = 0, _len = new_urls.length; _i < _len; _i++) {
      url = new_urls[_i];
      img = new Image();
      img.src = url;
      images[url] = img;
      img.onload = function() {
        return todo--;
      };
    }
    return null;
  };

  Body = (function() {

    function Body(jungle, sprite, x, y, misc) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      this.jungle = jungle;
      this.sprite = sprite;
      this.x = x;
      this.y = y;
      if (misc == null) {
        misc = {};
      }
      this.width = (_ref = misc.width) != null ? _ref : 2;
      this.height = (_ref1 = misc.height) != null ? _ref1 : 2;
      this.facing = (_ref2 = misc.facing) != null ? _ref2 : 'down';
      this.state = (_ref3 = misc.state) != null ? _ref3 : 'stopped';
      this.was_moving = (_ref4 = misc.was_moving) != null ? _ref4 : false;
      this.speed = (_ref5 = misc.speed) != null ? _ref5 : 2;
    }

    Body.prototype.occupying = function() {
      var bottom_row, bottom_y, c, left_column, left_x, r, right_column, right_x, sq_height, sq_width, squares, top_row, top_y, _i, _j;
      sq_height = this.jungle.square_height;
      sq_width = this.jungle.square_width;
      top_y = this.y;
      bottom_y = top_y + this.height * sq_height;
      left_x = this.x;
      right_x = left_x + this.width * sq_width;
      top_row = Math.floor(top_y / sq_height);
      bottom_row = Math.ceil(bottom_y / sq_height) - 1;
      left_column = Math.floor(left_x / sq_width);
      right_column = Math.ceil(right_x / sq_width) - 1;
      squares = [];
      for (r = _i = top_row; top_row <= bottom_row ? _i <= bottom_row : _i >= bottom_row; r = top_row <= bottom_row ? ++_i : --_i) {
        for (c = _j = left_column; left_column <= right_column ? _j <= right_column : _j >= right_column; c = left_column <= right_column ? ++_j : --_j) {
          squares.push([r, c]);
        }
      }
      return squares;
    };

    Body.prototype.imageURLs = function() {
      var dir, i, urls, _i, _j, _len;
      urls = [];
      for (_i = 0, _len = dirs.length; _i < _len; _i++) {
        dir = dirs[_i];
        urls.push("img/" + this.sprite + "/stopped/" + dir + ".png");
        for (i = _j = 0; _j <= 3; i = ++_j) {
          urls.push("img/" + this.sprite + "/moving/" + dir + "/" + i + ".png");
        }
      }
      return urls;
    };

    Body.prototype.loadImages = function() {
      return loadImages(this.imageURLs());
    };

    Body.prototype.imageURL = function() {
      switch ((this.was_moving ? 'moving' : this.state)) {
        case 'stopped':
          return "img/" + this.sprite + "/stopped/" + this.facing + ".png";
        case 'moving':
          return "img/" + this.sprite + "/moving/" + this.facing + "/" + this.jungle.anim_frame + ".png";
      }
    };

    Body.prototype.draw = function() {
      var j;
      j = this.jungle;
      return j.ctx.drawImage(images[this.imageURL()], this.x + j.x_offset, this.y + j.y_offset);
    };

    Body.prototype.mark = function() {
      var bodies, c, cell, r, _i, _len, _ref, _ref1, _results;
      bodies = this.jungle.bodies;
      _ref = this.occupying();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], r = _ref1[0], c = _ref1[1];
        cell = bodies[r][c];
        if (__indexOf.call(cell, this) < 0) {
          _results.push(cell.push(this));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Body.prototype.unmark = function() {
      var bodies, body, c, r, _i, _len, _ref, _ref1, _results;
      bodies = this.jungle.bodies;
      _ref = this.occupying();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], r = _ref1[0], c = _ref1[1];
        _results.push(bodies[r][c] = (function() {
          var _j, _len1, _ref2, _results1;
          _ref2 = bodies[r][c];
          _results1 = [];
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            body = _ref2[_j];
            if (body !== this) {
              _results1.push(body);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Body.prototype.advance = function() {
      this.unmark();
      switch (this.state) {
        case 'moving':
          this.was_moving = true;
          this.bump();
          if (this.aligned()) {
            this.state = 'stopped';
          }
          break;
        case 'stopped':
          this.was_moving = false;
          this.move();
      }
      this.mark();
      return null;
    };

    Body.prototype.move = function() {
      return null;
    };

    Body.prototype.bump = function() {
      switch (this.facing) {
        case 'left':
          this.x -= this.speed;
          break;
        case 'right':
          this.x += this.speed;
          break;
        case 'up':
          this.y -= this.speed;
          break;
        case 'down':
          this.y += this.speed;
      }
      return null;
    };

    Body.prototype.aligned = function() {
      return this.x % this.jungle.square_width === 0 && this.y % this.jungle.square_height === 0;
    };

    Body.prototype.can_move = function(dir) {
      var c, copy, r, _i, _len, _ref, _ref1;
      copy = {
        x: this.x,
        y: this.y,
        speed: this.speed,
        facing: dir,
        jungle: this.jungle,
        height: this.height,
        width: this.width,
        bump: this.bump,
        occupying: this.occupying
      };
      copy.bump();
      _ref = copy.occupying();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], r = _ref1[0], c = _ref1[1];
        if (this.jungle.bodies[r][c].length !== 0) {
          return false;
        }
        if (this.sprite !== 'player') {
          if (this.jungle.pickups[r][c].length !== 0) {
            return false;
          }
        }
      }
      return true;
    };

    Body.prototype.start_moving = function(dir) {
      this.facing = dir;
      this.state = 'moving';
      this.bump();
      return null;
    };

    return Body;

  })();

  Player = (function(_super) {

    __extends(Player, _super);

    function Player(jungle, x, y, misc) {
      if (misc == null) {
        misc = {};
      }
      Player.__super__.constructor.call(this, jungle, 'player', x, y, misc);
    }

    Player.prototype.move = function() {
      var cw0, cw1, cw2, cw3, dir, no_keys, _i, _len, _ref;
      cw0 = this.facing;
      cw1 = clockwise(cw0);
      cw2 = clockwise(cw1);
      cw3 = clockwise(cw2);
      no_keys = true;
      _ref = [cw0, cw1, cw2, cw3];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dir = _ref[_i];
        if (this.jungle.keys[dir]) {
          no_keys = false;
          this.facing = dir;
          if (this.can_move(dir)) {
            this.start_moving(dir);
            return;
          }
        }
      }
      if (no_keys || this.jungle.keys[cw0]) {
        this.facing = cw0;
      }
      return null;
    };

    return Player;

  })(Body);

  Gazelle = (function(_super) {

    __extends(Gazelle, _super);

    function Gazelle(jungle, x, y, misc) {
      if (misc == null) {
        misc = {};
      }
      Gazelle.__super__.constructor.call(this, jungle, 'gazelle', x, y, misc);
    }

    Gazelle.prototype.move = function() {
      return null;
    };

    return Gazelle;

  })(Body);

  Jungle = (function() {

    function Jungle(canvas, misc) {
      var c, r, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      this.canvas = canvas;
      if (misc == null) {
        misc = {};
      }
      this.x_offset = (_ref = misc.x_offset) != null ? _ref : 0;
      this.y_offset = (_ref1 = misc.y_offset) != null ? _ref1 : 0;
      this.num_rows = r = (_ref2 = misc.num_rows) != null ? _ref2 : 24;
      this.num_columns = c = (_ref3 = misc.num_columns) != null ? _ref3 : 30;
      this.square_width = (_ref4 = misc.square_width) != null ? _ref4 : 16;
      this.square_height = (_ref5 = misc.square_height) != null ? _ref5 : 16;
      this.ctx = canvas.getContext('2d');
      this.frame = 0;
      this.anim_frame = 0;
      this.anim_subframe = 0;
      this.scenery = makeGrid(r, c, function() {
        return 'bare';
      });
      this.pickups = makeGrid(r, c, function() {
        return null;
      });
      this.bodies = makeGrid(r, c, function() {
        return [];
      });
      this.pickup_list = [];
      this.body_list = [];
      this.keys = {};
      null;
    }

    Jungle.prototype.advance = function() {
      var body, _i, _len, _ref;
      this.frame++;
      this.anim_subframe++;
      if (this.anim_subframe === 5) {
        this.anim_subframe = 0;
        this.anim_frame = (this.anim_frame + 1) % 4;
      }
      _ref = this.body_list;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        body = _ref[_i];
        body.advance();
      }
      return null;
    };

    Jungle.prototype.draw = function() {
      this.draw_scenery();
      this.draw_pickups();
      this.draw_bodies();
      return null;
    };

    Jungle.prototype.draw_scenery = function() {
      var c, r, x, y, _i, _j, _ref, _ref1;
      for (r = _i = 0, _ref = this.num_rows - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; r = 0 <= _ref ? ++_i : --_i) {
        for (c = _j = 0, _ref1 = this.num_columns - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; c = 0 <= _ref1 ? ++_j : --_j) {
          x = c * this.square_width + this.x_offset;
          y = r * this.square_height + this.y_offset;
          this.ctx.fillStyle = (function() {
            switch (this.scenery[r][c]) {
              case 'bare':
                return '#ffffcc';
              case 'grass':
                return '#00ff00';
              case 'water':
                return '#0033ff';
              case 'tree':
                return '#006600';
            }
          }).call(this);
          this.ctx.fillRect(x, y, this.square_width, this.square_height);
          this.ctx.fillStyle = 'black';
          this.ctx.fillText(this.bodies[r][c].length, x, y + 10);
        }
      }
      return null;
    };

    Jungle.prototype.draw_pickups = function() {
      var pickup, _i, _len, _ref;
      _ref = this.pickup_list;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        pickup = _ref[_i];
        pickup.draw();
      }
      return null;
    };

    Jungle.prototype.draw_bodies = function() {
      var body, _i, _len, _ref;
      _ref = this.body_list;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        body = _ref[_i];
        body.draw();
      }
      return null;
    };

    Jungle.prototype.set_scenery = function(r, c, val) {
      this.scenery[r][c] = val;
      return null;
    };

    Jungle.prototype.new_body = function(r, c, cons) {
      var body;
      body = new cons(this, c * this.square_width, r * this.square_height);
      this.body_list.push(body);
      body.mark();
      return null;
    };

    Jungle.prototype.loadImages = function() {
      var body, pickup, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.body_list;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        body = _ref[_i];
        body.loadImages();
      }
      _ref1 = this.pickup_list;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        pickup = _ref1[_j];
        pickup.loadImages();
      }
      return null;
    };

    Jungle.prototype.press_key = function(key) {
      return this.keys[key] = true;
    };

    Jungle.prototype.release_key = function(key) {
      return delete this.keys[key];
    };

    return Jungle;

  })();

  this.Jungle = Jungle;

  this.Player = Player;

  this.Gazelle = Gazelle;

}).call(this);
